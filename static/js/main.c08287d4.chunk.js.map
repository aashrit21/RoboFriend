{"version":3,"sources":["Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/ErrorBoundry.js","Container/App.js","serviceWorker.js","index.js"],"names":["SearchBox","SearchChange","className","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","robotsCardComponent","robots","map","user","i","key","Scroll","props","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wRAMeA,EAJG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACnB,OAAO,2BAAOC,UAAU,4CAA4CC,KAAM,SAASC,YAAa,eAAeC,SAAUJ,KCW3GK,EAZH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MACtB,OACC,yBAAKP,UAAW,uDACf,yBAAKQ,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,cACpD,6BACC,4BAAKH,GACL,2BAAIC,MCOOG,EAZE,SAAC,GAAY,IAEvBC,EAFsB,EAAVC,OAEgBC,KAAI,SAACC,EAAKC,GACzC,OAAO,kBAAC,EAAD,CAAMC,IAAMF,EAAKR,KAAMD,GAAMS,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,WAE7E,OACC,6BACEI,ICCWM,G,MARD,SAACC,GACd,OACC,yBAAKlB,UAAY,UACfkB,EAAMC,YCeKC,E,kDAlBd,WAAYF,GAAO,IAAD,8BACjB,cAAMA,IACDG,MAAM,CACVC,UAAS,GAHO,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACN,4DAEDG,KAAKP,MAAMC,a,GAfOQ,aCqDZC,G,8DA5Cd,aAAc,IAAD,8BACZ,gBAYDC,eAAgB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAZzC,EAAKZ,MAAO,CACXT,OAAQ,GACRmB,YAAa,IAJF,E,gEAOO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACd,OAAQ0B,S,+BAQ7B,IAAD,OACDC,EAAed,KAAKJ,MAAMT,OAAO4B,QAAO,SAAAC,GAC7C,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEjE,OAA8B,IAA3BjB,KAAKJ,MAAMT,OAAOgC,OACX,wBAAI5C,UAAU,cAAd,UACA,mCAAc,mCAAc,oCAKpC,yBAAKA,UAAU,MACd,wBAAIA,UAAY,MAAhB,cACA,kBAAC,EAAD,CAAWD,aAAe0B,KAAKI,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUjB,OAAQ2B,W,GAnCPZ,cCEEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.c08287d4.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({SearchChange})=>{\n\treturn <input className='bg-lightest-blue pa3 ma3 ba b--light-blue' type= 'search' placeholder= 'Search Robot' onChange={SearchChange} />\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card =({id, name,email})=>{\n\treturn (\n\t\t<div className= 'dib bg-light-green pa3 ma2 br3 bw3 grow shadow-5 tc'>\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt='Robot Pic' />\n\t\t\t<div >\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots})=>{\n\n\tconst robotsCardComponent= robots.map((user,i)=>{\n\t\t  return <Card key ={user.name} id = {user.id} name={user.name} email={user.email} />\n\t})\n\treturn (\n\t\t<div>\n\t\t\t{robotsCardComponent}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll =(props)=>{\n\treturn (\n\t\t<div className = 'scroll'>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\thasError:false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true})\n\t}\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>oops,Something Went Wrong...</h1>;\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React , {Component} from 'react';\nimport SearchBox from '../Components/SearchBox'\nimport CardList from '../Components/CardList';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\nimport './App.css'\nimport 'tachyons';\n\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state= {\n\t\t\trobots: [],\n\t\t\tsearchField: ''\n\t\t}\n\t}\n componentDidMount(){\n \tfetch('https://jsonplaceholder.typicode.com/users')\n \t.then(response=> response.json())\n \t.then(users=> this.setState({robots: users}))\n }\n\n onSearchChange =(event)=>{\n \tthis.setState({searchField: event.target.value})\n\n }\n\n\trender(){\n\t\tconst filterRobots = this.state.robots.filter(robot=>{\n \t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n \t})\n\t\tif(this.state.robots.length===0){\n\t\t  return (<h1 className='loading f1'>\n\t\t\t\t\tLOADING<span>.</span><span>.</span><span>.</span>\n\t\t\t\t  </h1>\n\t\t\t\t);\n\t\t} else{\n\t\t\treturn(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className = 'f1'>RoboFrirnd</h1>\n\t\t\t\t\t<SearchBox SearchChange= {this.onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filterRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t );\n\t\t}\n\t\t\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}